(ns advent-of-code.day5)

(defn parse-first-val [fv]
  (let [fv (str fv)
        split (split-at (- (count fv) 2) fv)
        opcode (Integer/parseInt (clojure.string/join "" (second split)))
        param-modes (reverse (first split))
        param-modes-len (count param-modes)]
    {:opcode opcode
     :modes {:first (if (> param-modes-len 0)
                      (first param-modes)
                      0)
             :second (if (> param-modes-len 1)
                       (second param-modes)
                       0)
             :third (if (> param-modes-len 2)
                      (nth param-modes 2)
                      0)}}))

(defn last-instruction [n p]
  (drop (- n 4) (take n p)))

(defn run-intcode-program
  ([p] (run-intcode-program 0 p))
  ([n p] (let [first-val (parse-first-val (nth p n))
               opcode (:opcode first-val)]
           (cond
             (= opcode 99) p
             (= opcode 3) (do
                            (println "Enter input:")
                            (let [input (Integer/parseInt (read-line))
                                  new-pos (nth p (+ n 1))]
                              (run-intcode-program (+ n 2)
                                                   (assoc p new-pos input))))
             (= opcode 4) (let [output (nth p (+ n 1))]
                            (println "Output:")
                            (println output)
                            (if (not= output 0)
                              (println (last-instruction n p)))
                            (run-intcode-program (+ n 2) p))
             :else (let [operand-a (if (= \0 (:first (:modes first-val)))
                                     (nth p (nth p (+ n 1)))
                                     (nth p (+ n 1)))
                         operand-b (if (= \0 (:second (:modes first-val)))
                                     (nth p (nth p (+ n 2)))
                                     (nth p (+ n 2)))
                         new-pos (nth p (+ n 3))
                         new-val (if (= opcode 1)
                                   (+ operand-a operand-b)
                                   (* operand-a operand-b))]
                     (run-intcode-program (+ n 4) (assoc p new-pos new-val)))))))

(def puzzle-input [3,225,1,225,6,6,1100,1,238,225,104,0,1102,59,58,224,1001,224,-3422,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,59,30,225,1101,53,84,224,101,-137,224,224,4,224,1002,223,8,223,101,3,224,224,1,223,224,223,1102,42,83,225,2,140,88,224,1001,224,-4891,224,4,224,1002,223,8,223,1001,224,5,224,1,223,224,223,1101,61,67,225,101,46,62,224,1001,224,-129,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,1102,53,40,225,1001,35,35,224,1001,224,-94,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1101,5,73,225,1002,191,52,224,1001,224,-1872,224,4,224,1002,223,8,223,1001,224,5,224,1,223,224,223,102,82,195,224,101,-738,224,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1101,83,52,225,1101,36,77,225,1101,9,10,225,1,113,187,224,1001,224,-136,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1007,226,226,224,1002,223,2,223,1006,224,329,1001,223,1,223,1108,226,226,224,102,2,223,223,1006,224,344,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,359,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,374,1001,223,1,223,7,677,226,224,102,2,223,223,1005,224,389,1001,223,1,223,1008,677,677,224,1002,223,2,223,1005,224,404,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,419,101,1,223,223,1008,226,677,224,1002,223,2,223,1006,224,434,1001,223,1,223,1107,677,226,224,1002,223,2,223,1005,224,449,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,464,1001,223,1,223,8,226,226,224,1002,223,2,223,1006,224,479,1001,223,1,223,107,226,677,224,102,2,223,223,1005,224,494,1001,223,1,223,7,226,226,224,102,2,223,223,1005,224,509,1001,223,1,223,107,226,226,224,102,2,223,223,1005,224,524,101,1,223,223,107,677,677,224,1002,223,2,223,1006,224,539,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,554,101,1,223,223,1107,677,677,224,1002,223,2,223,1005,224,569,101,1,223,223,108,226,677,224,1002,223,2,223,1006,224,584,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,599,1001,223,1,223,8,226,677,224,102,2,223,223,1006,224,614,1001,223,1,223,108,677,677,224,1002,223,2,223,1006,224,629,1001,223,1,223,1007,226,677,224,1002,223,2,223,1006,224,644,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,659,1001,223,1,223,1107,226,677,224,102,2,223,223,1006,224,674,1001,223,1,223,4,223,99,226])

